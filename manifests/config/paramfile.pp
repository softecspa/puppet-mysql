# == Define mysql::config::paramfile
#
# This define do tuning to mysql service. Every tuning parameter must be passed in "params" in form of an hash.
# Every parameters passed to params are written in /etc/mysql/conf.d/<name>.cfg and:
# - if mysql::disable_service_restart is false, then service wil be restarted
# - if mysql::disable_service_restart if true, then, tuning is made in runtime.
#
# Note: through this define you can configure every READ-WRITE mysql variable. Here is a list of read-write tested parameters. If you want to add untested parameter, please,
# check if variable is read-write, otherwise, add it to parameters list of mysql class.
#
#  - auto_increment_increment
#  - expire_logs_days
#  - innodb_flush_log_at_trx_commit
#  - innodb_thread_concurrency
#  - interactive_timeout
#  - join_buffer_size
#  - long_query_time
#  - max_allowed_packet
#  - max_binlog_size
#  - max_connect_errors
#  - max_connections
#  - max_heap_table_size
#  - myisam_sort_buffer_size
#  - query_cache_limit
#  - query_cache_size
#  - read_buffer_size
#  - read_rnd_buffer_size
#  - server_id
#  - sort_buffer_size
#  - sync_binlog
#  - thread_cache_size
#  - thread_concurrency
#  - tmp_table_size
#  - wait_timeout
#
# === Parameters
#
# [*section*]
#   Section of config file where to add directive specified in params parameter. Default: mysqld
#
# [*params*]
#   Parameters to set, passed in form of hash:
#   $params = {
#     '$param1' => {'value' => $value1 },
#     '$param2' => {'value' => $value2 },
#     '$param3' => {'value' => $value3 },
#   }
#
# === Examples
#
# class {'mysql':
#   disabled_service_restart
# }
#
# $params = { 'wait_timeout' => {'value' => '300'},
#             'sync_binog'   => {'value' => '1'} }
#
# mysql::config::paramfile {'tuning':
#   params  => $params
# }
#
define mysql::config::paramfile(
  $section="mysqld",
  $params,
) {

  if !is_hash($params) {
    fail('params must be hash')
  }

  concat_build { $name :
    order   => ['*.tmp'],
    target  => "/etc/mysql/conf.d/${name}.cnf"
  }

  concat_fragment { "$name+001.tmp":
    content => "#Generated by puppet\n[$section]"
  }

  file {"/etc/mysql/conf.d/${name}.cnf":
    ensure => present,
    owner => "root",
    group => "admin",
    mode => 640,
    require => Class["mysql::install"],
  }

  create_resources(mysql::config::param,$params,{'filename'=>$name})

  if $mysql::params::notify_service {
    File["/etc/mysql/conf.d/${name}.cnf"] {
      notify  => Service[$mysql::params::service]
    }
  } else {
    # se non notifico il servizio mysql, configuro in runtime
      create_resources(mysql::config::runtime,$params)
  }
}
